////////////////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------------- //
//                                                                            //
//                        (C) 2012-2013  David Krutsko                        //
//                        See LICENSE.md for copyright                        //
//                                                                            //
// -------------------------------------------------------------------------- //
////////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------//
// Prefaces                                                                   //
//----------------------------------------------------------------------------//

#include "Content/Asset.h"
#include "Content/Content.h"
#include "Engine/Console.h"



//----------------------------------------------------------------------------//
// Static                                                               Asset //
//----------------------------------------------------------------------------//

quint16 Asset::mAssetIDCounter = 0;



//----------------------------------------------------------------------------//
// Constructors                                                         Asset //
//----------------------------------------------------------------------------//

////////////////////////////////////////////////////////////////////////////////
/// <summary> </summary>

Asset::Asset (quint16 assetID)
{
	mReferences = 1;
	mAssetID = assetID;
	mManaged = false;
}

////////////////////////////////////////////////////////////////////////////////
/// <summary> </summary>

Asset::Asset (const Asset& asset)
{
	mReferences = 1;
	mManaged = false;
	mAssetID = asset.mAssetID;
	mSource  = asset.mSource;
}



//----------------------------------------------------------------------------//
// Methods                                                              Asset //
//----------------------------------------------------------------------------//

////////////////////////////////////////////////////////////////////////////////
/// <summary> </summary>

void Asset::Retain (void)
{
	++mReferences;
}

////////////////////////////////////////////////////////////////////////////////
/// <summary> </summary>

void Asset::Release (bool force)
{
	// Check if the asset needs to be deleted
	if (force || mReferences == 1)
	{
		// Asset is managed by the content manager
		if (mManaged) Content::mLoaded.remove (mSource);

		// Delete asset
		delete this;
	}

	// Decrement references
	else --mReferences;
}
