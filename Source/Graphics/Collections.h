////////////////////////////////////////////////////////////////////////////////
// -------------------------------------------------------------------------- //
//                                                                            //
//                        (C) 2012-2013  David Krutsko                        //
//                        See LICENSE.md for copyright                        //
//                                                                            //
// -------------------------------------------------------------------------- //
////////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------//
// Prefaces                                                                   //
//----------------------------------------------------------------------------//

#ifndef GRAPHICS_COLLECTIONS_H
#define GRAPHICS_COLLECTIONS_H

#include <QList.h>



//----------------------------------------------------------------------------//
// Classes                                                                    //
//----------------------------------------------------------------------------//

////////////////////////////////////////////////////////////////////////////////
/// <summary> </summary>

template <class T>
class ElementCollection
{
public:
	//----------------------------------------------------------------------------//
	// Constructors                                                               //
	//----------------------------------------------------------------------------//

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline ElementCollection<T> (void) { }

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline ~ElementCollection<T> (void) { Clear(); }

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>
	
	inline ElementCollection<T> (const ElementCollection<T>& collection)
	{
		foreach (T* element, c.collection)
			collection.append (new T (*element));
	}

public:
	//----------------------------------------------------------------------------//
	// Methods                                                                    //
	//----------------------------------------------------------------------------//

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline void Clear (void)
	{
		foreach (T* element, collection)
			delete element;

		collection.clear();
	}

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline void Add (T* element)			{ collection.append (element);	}

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline quint32 Length (void) const		{ return collection.length();	}

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline bool IsEmpty (void) const		{ return collection.isEmpty();	}



	//----------------------------------------------------------------------------//
	// Operators                                                                  //
	//----------------------------------------------------------------------------//

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline T* operator [] (quint32 index) const { return collection[index]; }

private:
	//----------------------------------------------------------------------------//
	// Fields                                                                     //
	//----------------------------------------------------------------------------//

	QList<T*> collection; // List of elements
};



////////////////////////////////////////////////////////////////////////////////
/// <summary> </summary>

template <class T>
class AssetCollection
{
public:
	//----------------------------------------------------------------------------//
	// Constructors                                                               //
	//----------------------------------------------------------------------------//

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline AssetCollection<T> (void) { }

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline ~AssetCollection<T> (void) { Clear(); }

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>
	
	inline AssetCollection<T> (const AssetCollection<T>& collection)
	{
		foreach (T* element, c.collection)
		{
			element->Retain();
			collection.append (element);
		}
	}

public:
	//----------------------------------------------------------------------------//
	// Methods                                                                    //
	//----------------------------------------------------------------------------//

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline void Clear (void)
	{
		foreach (T* element, collection)
			element->Release();

		collection.clear();
	}

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline void Add (T* element)			{ collection.append (element);	}

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline quint32 Length (void) const		{ return collection.length();	}

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline bool IsEmpty (void) const		{ return collection.isEmpty();	}



	//----------------------------------------------------------------------------//
	// Operators                                                                  //
	//----------------------------------------------------------------------------//

	////////////////////////////////////////////////////////////////////////////////
	/// <summary> </summary>

	inline T* operator [] (quint32 index) const { return collection[index]; }

private:
	//----------------------------------------------------------------------------//
	// Fields                                                                     //
	//----------------------------------------------------------------------------//

	QList<T*> collection; // List of assets
};

#endif // GRAPHICS_COLLECTIONS_H
